/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.projetofinal;

//Loreno E. Ribeiro, 0403444
//Guilherme M. Moretti, 0402987

import java.util.List;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.DefaultRowSorter;
import javax.swing.RowFilter;

/**
 *
 * @author Usuário
 */
public class TelaPrincipal extends javax.swing.JFrame {
    
    ArrayList<Retirada> listaDeRetiradas;
    int registroAtual;

    /**
     * Creates new form TelaPrincipal
     */
    public TelaPrincipal() {
        initComponents();
        listaDeRetiradas = new ArrayList<Retirada>();
        registroAtual = -1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        tfNOME = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfMATRICULA = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfNOTEBOOK = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tfCARREGADOR = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfMALETA = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTABELA = new javax.swing.JTable();
        btSALVAR = new javax.swing.JButton();
        btDEVOLUCAO = new javax.swing.JButton();
        btCARREGAR = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tfDEVOLUCAO = new javax.swing.JTextField();
        btFILTRAR = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        tfMATRICULAFILTRAR = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        tfFLAGFILTRAR = new javax.swing.JTextField();
        btREMOVER = new javax.swing.JButton();
        btLIMPARFILTRO = new javax.swing.JButton();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Nome do Aluno:");

        tfNOME.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setText("Código do Aluno:");

        tfMATRICULA.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel3.setText("Código do Notebook:");

        tfNOTEBOOK.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel4.setText("Código do Carregador:");

        tfCARREGADOR.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel5.setText("Código da Maleta:");

        tfMALETA.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        jtTABELA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data e Hora", "Nome do Aluno", "Código do Aluno", "Código do Notebook", "Código do Carregador", "Código da Maleta", "Notebook Devolvido"
            }
        ));
        jScrollPane1.setViewportView(jtTABELA);

        btSALVAR.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btSALVAR.setText("Salvar");
        btSALVAR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btSALVARMouseClicked(evt);
            }
        });

        btDEVOLUCAO.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btDEVOLUCAO.setText("Devolver Notebook");
        btDEVOLUCAO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btDEVOLUCAOMouseClicked(evt);
            }
        });

        btCARREGAR.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btCARREGAR.setText("Carregar Dados da Planilha");
        btCARREGAR.setToolTipText("");
        btCARREGAR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btCARREGARMouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel7.setText("Código do Aluno:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        tfDEVOLUCAO.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        btFILTRAR.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btFILTRAR.setText("Filtrar");
        btFILTRAR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btFILTRARMouseClicked(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel9.setText("Código do Aluno");

        tfMATRICULAFILTRAR.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel10.setText("Notebook Devolvido");

        tfFLAGFILTRAR.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        btREMOVER.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btREMOVER.setText("Remover");
        btREMOVER.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btREMOVERMouseClicked(evt);
            }
        });

        btLIMPARFILTRO.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btLIMPARFILTRO.setText("Limpar Filtro");
        btLIMPARFILTRO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btLIMPARFILTROMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(tfMATRICULA, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tfNOTEBOOK, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btCARREGAR, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tfNOME, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(tfCARREGADOR, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfMALETA, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btREMOVER)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSALVAR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btFILTRAR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btLIMPARFILTRO, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
                                .addGap(22, 22, 22)
                                .addComponent(jLabel8)
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfMATRICULAFILTRAR, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfFLAGFILTRAR, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfDEVOLUCAO)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(10, 10, 10)
                                .addComponent(btDEVOLUCAO)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfNOME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfDEVOLUCAO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btDEVOLUCAO))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(btFILTRAR))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfMATRICULAFILTRAR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfFLAGFILTRAR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(tfMATRICULA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btLIMPARFILTRO)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(76, 76, 76)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfNOTEBOOK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfCARREGADOR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfMALETA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btSALVAR)
                            .addComponent(btREMOVER))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btCARREGAR)
                        .addGap(106, 106, 106))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btSALVARMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btSALVARMouseClicked
        
        LocalDateTime dataHoraAtual = LocalDateTime.now();
        String dataHora = dataHoraAtual.format(DateTimeFormatter.ofPattern("dd/MM/yyyy  HH:mm:ss"));
        String flag = "nao";

        if (tfNOME.getText().isEmpty() ||
        tfMATRICULA.getText().isEmpty() ||
        tfNOTEBOOK.getText().isEmpty() ||
        tfCARREGADOR.getText().isEmpty() ||
        tfMALETA.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Não é possível salvar.\nUm dos campos está vazio.");
    } else if (tfMATRICULA.getText().length() != 7 ||
        tfNOTEBOOK.getText().length() != 7 ||
        tfCARREGADOR.getText().length() != 7 ||
        tfMALETA.getText().length() != 7) {
        JOptionPane.showMessageDialog(this, "Não é possível salvar.\nOs códigos possuem 7 números.");
    } else {
        DefaultTableModel tabela = (DefaultTableModel) jtTABELA.getModel();
        boolean alunoEncontrado = false;

        for (int i=0; i<tabela.getRowCount(); i++) {
            String codigoAlunoNaTabela = (String) tabela.getValueAt(i, 2);
            String flagNaTabela = (String) tabela.getValueAt(i, 6);

            if (tfMATRICULA.getText().equals(codigoAlunoNaTabela) && "nao".equals(flagNaTabela)) {
                alunoEncontrado = true;
                break;
            }
        }

        if (alunoEncontrado) {
            JOptionPane.showMessageDialog(this, "Não é possível salvar.\nO aluno já possui um notebook não devolvido.");
        } else {
            Object[] dados = {dataHora,
                              tfNOME.getText(),
                              tfMATRICULA.getText(),
                              tfNOTEBOOK.getText(),
                              tfCARREGADOR.getText(),
                              tfMALETA.getText(),
                              flag};
            tabela.addRow(dados);
            
            Aluno aluno = new Aluno(tfNOME.getText(),
                                tfMATRICULA.getText(), 
                                0);
        
            Equipamento equipamento = new Equipamento(tfNOTEBOOK.getText(),
                                                      tfCARREGADOR.getText(),
                                                      tfMALETA.getText(), 
                                                      0, 
                                                      0, 
                                                      0);
        
            Retirada retirada = new Retirada(aluno, equipamento);
            retirada.setDataHora(dataHoraAtual);
            retirada.setFlag(flag);

            listaDeRetiradas.add(retirada);
            registroAtual = listaDeRetiradas.size() - 1;

            System.out.println(listaDeRetiradas);
                        
            try {
                FileOutputStream fos;
                fos = new FileOutputStream("listaDeRetiradas.bin");
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                oos.writeObject(listaDeRetiradas);
                oos.close();
                fos.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            tfNOME.setText("");
            tfMATRICULA.setText("");
            tfNOTEBOOK.setText("");
            tfCARREGADOR.setText("");
            tfMALETA.setText("");
            
        }
    }
    }//GEN-LAST:event_btSALVARMouseClicked

    private void btCARREGARMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btCARREGARMouseClicked
    
        try{
            FileInputStream fis = new FileInputStream("listaDeRetiradas.bin");
            ObjectInputStream ois = new ObjectInputStream(fis);
            listaDeRetiradas = (ArrayList<Retirada>) ois.readObject();
            ois.close();
            fis.close();
            
            DefaultTableModel tabela = (DefaultTableModel) jtTABELA.getModel();
            tabela.setRowCount(0);
            
            for (Retirada retirada : listaDeRetiradas){
                
                LocalDateTime dataHora = retirada.getDataHora();
                Aluno aluno = retirada.getAluno();
                Equipamento equipamento = retirada.getEquipamento();
                String flag = retirada.getFlag();

                Object[] dados = {dataHora.format(DateTimeFormatter.ofPattern("dd/MM/yyyy  HH:mm:ss")),
                                  aluno.getNome(),
                                  aluno.getMatricula(),
                                  equipamento.getCodNotebook(),
                                  equipamento.getCodCarregador(),
                                  equipamento.getCodMaleta(),
                                  flag};
                tabela.addRow(dados);
            }            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    
       
    }//GEN-LAST:event_btCARREGARMouseClicked

    private void btDEVOLUCAOMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btDEVOLUCAOMouseClicked

        String codigoAlunoDevolucao = tfDEVOLUCAO.getText();

        if (codigoAlunoDevolucao.isEmpty() || codigoAlunoDevolucao.length() != 7){
            JOptionPane.showMessageDialog(this, "Não foi possível devolver.\nOs códigos possuem 7 números.");
        }

        DefaultTableModel tabela = (DefaultTableModel) jtTABELA.getModel();
        boolean alunoEncontrado = false;


        for (int i = 0; i < tabela.getRowCount(); i++) {
            String codigoAlunoNaTabela = (String) tabela.getValueAt(i, 2);
            String flagNaTabela = (String) tabela.getValueAt(i, 6);
            if (codigoAlunoDevolucao.equals(codigoAlunoNaTabela) && "nao".equals(flagNaTabela)){
                tabela.setValueAt("sim", i, 6);
                listaDeRetiradas.get(i).setFlag("sim");
                alunoEncontrado = true;
                break;
            }
        }
        if (!alunoEncontrado) {
        JOptionPane.showMessageDialog(this, "Código do aluno não encontrado na tabela ou Notebook já foi devolvido anteriormente.");
        } else {
        JOptionPane.showMessageDialog(this, "Notebook devolvido com sucesso!");       
            try {
                FileOutputStream fos;
                fos = new FileOutputStream("listaDeRetiradas.bin");
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                oos.writeObject(listaDeRetiradas);
                oos.close();
                fos.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        tfDEVOLUCAO.setText("");
        
    }//GEN-LAST:event_btDEVOLUCAOMouseClicked

    private void btFILTRARMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btFILTRARMouseClicked

        String codigoAlunoFiltrar = tfMATRICULAFILTRAR.getText();
        String flagNotebookDevolvidoFiltrar = tfFLAGFILTRAR.getText();
        
        if (jtTABELA.getRowSorter() == null) {
            jtTABELA.setAutoCreateRowSorter(true);
        }
        filtrarTabela(codigoAlunoFiltrar, flagNotebookDevolvidoFiltrar);

    }//GEN-LAST:event_btFILTRARMouseClicked

    private void btLIMPARFILTROMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btLIMPARFILTROMouseClicked

    if (jtTABELA.getRowSorter() != null) {
        ((DefaultRowSorter<?, ?>) jtTABELA.getRowSorter()).setRowFilter(null);
    }

    DefaultTableModel tabela = (DefaultTableModel) jtTABELA.getModel();
    tabela.setRowCount(0);

    for (Retirada retirada : listaDeRetiradas) {
        LocalDateTime dataHora = retirada.getDataHora();
        Aluno aluno = retirada.getAluno();
        Equipamento equipamento = retirada.getEquipamento();
        String flag = retirada.getFlag();

        Object[] dados = {dataHora.format(DateTimeFormatter.ofPattern("dd/MM/yyyy  HH:mm:ss")),
                aluno.getNome(),
                aluno.getMatricula(),
                equipamento.getCodNotebook(),
                equipamento.getCodCarregador(),
                equipamento.getCodMaleta(),
                flag};
        tabela.addRow(dados);
    }
    tfMATRICULAFILTRAR.setText("");
    tfFLAGFILTRAR.setText("");

    }//GEN-LAST:event_btLIMPARFILTROMouseClicked

    private void btREMOVERMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btREMOVERMouseClicked
        int selectedRow = jtTABELA.getSelectedRow();

            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Selecione uma linha para remover.");
                return;
            }

            DefaultTableModel tabela = (DefaultTableModel) jtTABELA.getModel();
            tabela.removeRow(selectedRow);

            if (selectedRow < listaDeRetiradas.size()) {
                listaDeRetiradas.remove(selectedRow);
        
            if (selectedRow == tabela.getRowCount()) {
                registroAtual = selectedRow - 1;
            }else{
                registroAtual = -1;
            }
                
            try {
                FileOutputStream fos = new FileOutputStream("listaDeRetiradas.bin");
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                oos.writeObject(listaDeRetiradas);
                oos.close();
                fos.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btREMOVERMouseClicked
    
    public void filtrarTabela(String codigoAluno, String flagNotebookDevolvido) {
        List<RowFilter<Object, Object>> filtros = new ArrayList<>();

        if (!codigoAluno.isEmpty()) {
            filtros.add(RowFilter.regexFilter(codigoAluno, 2));
        }
        if (!flagNotebookDevolvido.isEmpty()) {
            filtros.add(RowFilter.regexFilter(flagNotebookDevolvido, 6));
        }

        RowFilter<Object, Object> combinedFilter = RowFilter.andFilter(filtros);
        ((DefaultRowSorter<?, ?>) jtTABELA.getRowSorter()).setRowFilter(combinedFilter);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCARREGAR;
    private javax.swing.JButton btDEVOLUCAO;
    private javax.swing.JButton btFILTRAR;
    private javax.swing.JButton btLIMPARFILTRO;
    private javax.swing.JButton btREMOVER;
    private javax.swing.JButton btSALVAR;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtTABELA;
    private javax.swing.JTextField tfCARREGADOR;
    private javax.swing.JTextField tfDEVOLUCAO;
    private javax.swing.JTextField tfFLAGFILTRAR;
    private javax.swing.JTextField tfMALETA;
    private javax.swing.JTextField tfMATRICULA;
    private javax.swing.JTextField tfMATRICULAFILTRAR;
    private javax.swing.JTextField tfNOME;
    private javax.swing.JTextField tfNOTEBOOK;
    // End of variables declaration//GEN-END:variables
}
